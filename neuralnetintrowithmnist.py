# -*- coding: utf-8 -*-
"""NeuralNetIntroWithMNIST.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19nSzdoQrztRyT0T3Fy4KxeGJeJr4Ilbr
"""

from keras.datasets import mnist
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
import random as rand

# Load MNIST dataset
(x_train, y_train), (x_test, y_test) = mnist.load_data()

print("Number of training images: " + str(x_train.shape[0]))
print("Number of test images: " + str(x_test.shape[0]))

# Normalizing data (image data possible range of values includes 0-255)
x_train = x_train / 255
x_test = x_test / 255

# Adding neural network layers
neural_net = tf.keras.Sequential()
neural_net.add(tf.keras.layers.Flatten(input_shape=[28,28]))
neural_net.add(tf.keras.layers.Dense(16, activation="relu"))
neural_net.add(tf.keras.layers.Dense(16, activation="relu"))
neural_net.add(tf.keras.layers.Dense(10, activation="softmax"))

neural_net.summary() # print summary of properties

# Train the model
neural_net.compile("adam", loss="categorical_crossentropy", metrics=["accuracy"])

y_train = tf.keras.utils.to_categorical(y_train, num_classes=10)
y_test = tf.keras.utils.to_categorical(y_test, num_classes=10)

model_history = neural_net.fit(x_train, y_train, validation_split=0.2, batch_size=32, epochs=10)

# Plot value accuracy vs training accuracy
plt.plot(model_history.history["accuracy"])
plt.plot(model_history.history["val_accuracy"])
plt.title("Value Accuracy and Training Accuracy")
plt.xlabel("epochs(iterations)")
plt.ylabel("accuracy")
plt.show()

# Select random image from test set
randomInt = rand.randint(1,10000)
input = x_test[randomInt]

# Use neural net to predict the number
output_prediction = neural_net.predict(input.reshape(-1,28,28))
print("Predicted number: ", np.argmax(output_prediction))